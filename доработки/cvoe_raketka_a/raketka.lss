
raketka.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000214  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000064  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000271  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015c  00000000  00000000  00000509  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000382  00000000  00000000  00000665  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  000009e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000dd  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000080  00000000  00000000  00000b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  00000ba5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	50 c0       	rjmp	.+160    	; 0xba <__vector_12>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	56 d0       	rcall	.+172    	; 0xe8 <main>
  3c:	af c0       	rjmp	.+350    	; 0x19c <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <PutChar>:
 delay_ms(1);       // делаем выдержку по времени 1 ms.
}

//**********************************************************************
void PutChar(unsigned char cha)
{
  40:	90 e0       	ldi	r25, 0x00	; 0
 unsigned char i;
 for(i=0;i<8;i++)
 {            
    cls0;  
  42:	c1 98       	cbi	0x18, 1	; 24
    if(cha&0x80) dat1;
  44:	87 ff       	sbrs	r24, 7
  46:	02 c0       	rjmp	.+4      	; 0x4c <PutChar+0xc>
  48:	c0 9a       	sbi	0x18, 0	; 24
  4a:	01 c0       	rjmp	.+2      	; 0x4e <PutChar+0xe>
    else dat0; 
  4c:	c0 98       	cbi	0x18, 0	; 24
    cha<<=1;
    cls1;
  4e:	c1 9a       	sbi	0x18, 1	; 24

//**********************************************************************
void PutChar(unsigned char cha)
{
 unsigned char i;
 for(i=0;i<8;i++)
  50:	9f 5f       	subi	r25, 0xFF	; 255
  52:	98 30       	cpi	r25, 0x08	; 8
  54:	11 f0       	breq	.+4      	; 0x5a <PutChar+0x1a>
 {            
    cls0;  
    if(cha&0x80) dat1;
    else dat0; 
    cha<<=1;
  56:	88 0f       	add	r24, r24
  58:	f4 cf       	rjmp	.-24     	; 0x42 <PutChar+0x2>
    cls1;
 } 
 cls0;
  5a:	c1 98       	cbi	0x18, 1	; 24
 return;
}
  5c:	08 95       	ret

0000005e <LoadConf>:
}

//**********************************************************************
void LoadConf(void)
{
 ce0;   // выключаем приемник
  5e:	df 98       	cbi	0x1b, 7	; 27
 cs1;     // включаем режим конфигурации
  60:	c2 9a       	sbi	0x18, 2	; 24
 return;
}
//***********************************************************************
void EnableTX(void)
{
DDRB|=0x03; // переключаем порт на передачу.
  62:	87 b3       	in	r24, 0x17	; 23
  64:	83 60       	ori	r24, 0x03	; 3
  66:	87 bb       	out	0x17, r24	; 23
{
 ce0;   // выключаем приемник
 cs1;     // включаем режим конфигурации
 EnableTX();
 // передаем конфигурацию.
 PutChar(0x08);
  68:	88 e0       	ldi	r24, 0x08	; 8
  6a:	ea df       	rcall	.-44     	; 0x40 <PutChar>
 PutChar(0x08);
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	e8 df       	rcall	.-48     	; 0x40 <PutChar>
 PutChar(0);
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	e6 df       	rcall	.-52     	; 0x40 <PutChar>
 PutChar(0);
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	e4 df       	rcall	.-56     	; 0x40 <PutChar>
 PutChar(0);
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	e2 df       	rcall	.-60     	; 0x40 <PutChar>
 PutChar(0xe7);
  7c:	87 ee       	ldi	r24, 0xE7	; 231
  7e:	e0 df       	rcall	.-64     	; 0x40 <PutChar>
 PutChar(0xbb);
  80:	8b eb       	ldi	r24, 0xBB	; 187
  82:	de df       	rcall	.-68     	; 0x40 <PutChar>
 PutChar(0);
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	dc df       	rcall	.-72     	; 0x40 <PutChar>
 PutChar(0);
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	da df       	rcall	.-76     	; 0x40 <PutChar>
 PutChar(0);
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	d8 df       	rcall	.-80     	; 0x40 <PutChar>
 PutChar(0xe7);
  90:	87 ee       	ldi	r24, 0xE7	; 231
  92:	d6 df       	rcall	.-84     	; 0x40 <PutChar>
 PutChar(adr);
  94:	8a ea       	ldi	r24, 0xAA	; 170
  96:	d4 df       	rcall	.-88     	; 0x40 <PutChar>
 PutChar(0x43);
  98:	83 e4       	ldi	r24, 0x43	; 67
  9a:	d2 df       	rcall	.-92     	; 0x40 <PutChar>
 PutChar(0x4e);
  9c:	8e e4       	ldi	r24, 0x4E	; 78
  9e:	d0 df       	rcall	.-96     	; 0x40 <PutChar>
 PutChar(0x20);
  a0:	80 e2       	ldi	r24, 0x20	; 32
  a2:	ce df       	rcall	.-100    	; 0x40 <PutChar>
 cs0;  				//выключаем режим конфигурации
  a4:	c2 98       	cbi	0x18, 2	; 24
 ce1;               // включаем приемник
  a6:	df 9a       	sbi	0x1b, 7	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a8:	8a ef       	ldi	r24, 0xFA	; 250
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LoadConf+0x4e>
 delay_ms(1);       // делаем выдержку по времени 1 ms.
}
  b0:	08 95       	ret

000000b2 <EnableTX>:
 return;
}
//***********************************************************************
void EnableTX(void)
{
DDRB|=0x03; // переключаем порт на передачу.
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	87 bb       	out	0x17, r24	; 23
return;
}
  b8:	08 95       	ret

000000ba <__vector_12>:

//***********************************************************************
// прерывание от компаратора
//***********************************************************************
ISR (ANA_COMP_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
    wdr();	
  c6:	a8 95       	wdr
	id_yd++;						//сбрасываем сторожевой таймер
  c8:	80 91 61 00 	lds	r24, 0x0061
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 93 61 00 	sts	0x0061, r24
    flag=1; 						// устанавливаем флаг удара.
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 60 00 	sts	0x0060, r24
    ACSR=0x80; 					// выключаем компаратор защита от помех.
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	88 b9       	out	0x08, r24	; 8
}
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <main>:
//************************************************************************************
// главный цикл подпрограммы
//*************************************************************************************
                           
int main(void)
{
  e8:	df 92       	push	r13
  ea:	ef 92       	push	r14
  ec:	ff 92       	push	r15
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
OSCCAL=eeprom_read_byte(0x00);        // Настройка генератора.
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	48 d0       	rcall	.+144    	; 0x18c <__eerd_byte_tn24>
  fc:	81 bf       	out	0x31, r24	; 49
PRR=0x0b;           // выключаем лишние устройства.
  fe:	8b e0       	ldi	r24, 0x0B	; 11
 100:	80 b9       	out	0x00, r24	; 0
DDRB=0b00000111;    //  настраиваем порт в
 102:	87 e0       	ldi	r24, 0x07	; 7
 104:	87 bb       	out	0x17, r24	; 23
PORTB=0b00000000;   // сбрасываем в ноль
 106:	18 ba       	out	0x18, r1	; 24
DDRA= 0b10011000;    // настраиваем порт А
 108:	88 e9       	ldi	r24, 0x98	; 152
 10a:	8a bb       	out	0x1a, r24	; 26
PORTA=0b00010000;   // выключаем приемопередатчик
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	8b bb       	out	0x1b, r24	; 27
DIDR0=0b00000110;   // отключаем цифровые входы от компаратора
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	81 b9       	out	0x01, r24	; 1
// сторожевой таймер
WDTCSR=0x18;        // настраиваем сторожевой таймер
 114:	88 e1       	ldi	r24, 0x18	; 24
 116:	81 bd       	out	0x21, r24	; 33
WDTCSR=0x29;        // сторожевой таймер сброс через 8 секунд.
 118:	89 e2       	ldi	r24, 0x29	; 41
 11a:	81 bd       	out	0x21, r24	; 33
// настройка переменных
flag=0;
 11c:	10 92 60 00 	sts	0x0060, r1
set_sleep_mode(SLEEP_MODE_IDLE);
 120:	85 b7       	in	r24, 0x35	; 53
 122:	87 7e       	andi	r24, 0xE7	; 231
 124:	85 bf       	out	0x35, r24	; 53
sleep_enable();
 126:	85 b7       	in	r24, 0x35	; 53
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	85 bf       	out	0x35, r24	; 53
id_yd=0;
 12c:	10 92 61 00 	sts	0x0061, r1
 130:	98 e8       	ldi	r25, 0x88	; 136
 132:	e9 2e       	mov	r14, r25
 134:	93 e1       	ldi	r25, 0x13	; 19
 136:	f9 2e       	mov	r15, r25
while (1)
      {  
		 ClsBit(PORTA,pwr_up); // выключаем приемник
		 flag=0;
		 delay_ms(20);
		 ACSR=0b00011011; // включаем компаратор.
 138:	8b e1       	ldi	r24, 0x1B	; 27
 13a:	d8 2e       	mov	r13, r24
 13c:	c4 ec       	ldi	r28, 0xC4	; 196
 13e:	d9 e0       	ldi	r29, 0x09	; 9
set_sleep_mode(SLEEP_MODE_IDLE);
sleep_enable();
id_yd=0;
while (1)
      {  
		 ClsBit(PORTA,pwr_up); // выключаем приемник
 140:	0a ec       	ldi	r16, 0xCA	; 202
 142:	18 e0       	ldi	r17, 0x08	; 8
 144:	db 98       	cbi	0x1b, 3	; 27
		 flag=0;
 146:	10 92 60 00 	sts	0x0060, r1
 14a:	c7 01       	movw	r24, r14
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x64>
		 delay_ms(20);
		 ACSR=0b00011011; // включаем компаратор.
 150:	d8 b8       	out	0x08, r13	; 8
 152:	ce 01       	movw	r24, r28
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0x6c>
		 delay_ms(10);
		 sei(); // разрешаем прерывания 
 158:	78 94       	sei
 15a:	01 c0       	rjmp	.+2      	; 0x15e <main+0x76>
         while(!flag)  	sleep_cpu();  //ждем удара и усыпляем контролер 
 15c:	88 95       	sleep
 15e:	80 91 60 00 	lds	r24, 0x0060
 162:	88 23       	and	r24, r24
 164:	d9 f3       	breq	.-10     	; 0x15c <main+0x74>
		 // удар произошел передаем данные
		 // 
		 cli(); // запрещаем прерывания.
 166:	f8 94       	cli
		 SetBit(PORTA,pwr_up);  // включаем приемник
 168:	db 9a       	sbi	0x1b, 3	; 27
 16a:	ce 01       	movw	r24, r28
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0x84>
		 delay_ms(10);       	// задержка 10 ms.
		 LoadConf();         	// загружаем конфигурацию.  
 170:	76 df       	rcall	.-276    	; 0x5e <LoadConf>
		 // передаем пакет.      
         PutChar(0xe7);
 172:	87 ee       	ldi	r24, 0xE7	; 231
 174:	65 df       	rcall	.-310    	; 0x40 <PutChar>
         PutChar(adr);  
 176:	8a ea       	ldi	r24, 0xAA	; 170
 178:	63 df       	rcall	.-314    	; 0x40 <PutChar>
         PutChar(id_yd);      
 17a:	80 91 61 00 	lds	r24, 0x0061
 17e:	60 df       	rcall	.-320    	; 0x40 <PutChar>
		 ce0; // активизируем передачу    
 180:	df 98       	cbi	0x1b, 7	; 27
 182:	c8 01       	movw	r24, r16
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x9c>
         delay_ms(9); // делаем выдержку по времени 1 ms.
		 wdr(); // сбрасываем сторожевой таймер.
 188:	a8 95       	wdr
 18a:	dc cf       	rjmp	.-72     	; 0x144 <main+0x5c>

0000018c <__eerd_byte_tn24>:
 18c:	e1 99       	sbic	0x1c, 1	; 28
 18e:	fe cf       	rjmp	.-4      	; 0x18c <__eerd_byte_tn24>
 190:	1f ba       	out	0x1f, r1	; 31
 192:	8e bb       	out	0x1e, r24	; 30
 194:	e0 9a       	sbi	0x1c, 0	; 28
 196:	99 27       	eor	r25, r25
 198:	8d b3       	in	r24, 0x1d	; 29
 19a:	08 95       	ret

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
